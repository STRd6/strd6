- tile_size = 16

= juggernaut(:channels => [object.channel])

%canvas#treeworld{:width => object.width*tile_size, :height => object.height*tile_size}

- data = object.world_data

:javascript
  var ageFactor = 1000;

  function sendChat(message) {
    $.post("chat", {
      message: message
    });
  }

  function receiveChat(message) {
    $('body').append(message);
  }

  $(function() {
    var tileWidth = #{tile_size};
    var tileHeight = #{tile_size};
    var data = #{data};
    var turn = data.treeworld.age;

    function treeAge() {
      return Math.floor((turn - this.planted_at)/ageFactor);
    }

    console.log(turn);

    var treeIndex = {};
    $.each(data.treeworld.trees, function(i, tree) {
      treeIndex[tree.id] = tree;
      tree.age = treeAge;
    });

    var playerIndex = {};
    $.each(data.treeworld.players, function(i, player) {
      playerIndex[player.id] = player;
    });

    console.log(treeIndex);

    var commands = [];

    window["updateWorld"] = function(changedObjects) {
      turn += 1;

      $.each(changedObjects, function(i, object) {
        console.log(this);
        $.each(object, function(type, data) {
          console.log(type);
          if(type == "tree") {
            treeIndex[data.id] = data;
          } else if(type == "player") {
            playerIndex[data.id] = data;
          }
        });
      });

      updateCanvas();
    };

    // Loading via proxy objects
    var treeTiles = $.map(['sprout', 'small', 'medium', 'large', 'dead'], function(name, i) {
      return loadImageTile("/images/treeworld/plants/tree_" + name + ".png");
    });

    console.log(treeTiles);

    var playerTile = loadImageTile("/images/treeworld/creatures/farmer.png");

    var groundTile = loadImageTile("/images/treeworld/terrain/ground1.png");

    var highlights = $.map(['yellow', 'white', 'cyan', 'red', 'purple'], function(name, i) {
      return loadImageTile("/images/treeworld/highlights/" + name + ".png");
    });

    var powerCanvas = $("#treeworld").powerCanvas();

    function drawObject(object, tile) {
      tile.draw(powerCanvas, object.x * tileWidth, object.y * tileHeight);
    }

    function updateCanvas() {
      powerCanvas.fill("#000");

      for(var row = 0; row < 32; row++) {
        for(var col = 0; col < 32; col++) {
          groundTile.draw(powerCanvas, col * tileWidth, row * tileHeight)
        }
      }

      $.each(treeIndex, function() {
        drawObject(this, treeTiles.clampedGet(this.age()));
      });

      $.each(playerIndex, function() {
        drawObject(this, playerTile);
      });

      $.each(commands, function() {
        drawObject(this, highlights[0]);
      });
    }

    setTimeout(updateCanvas, 3000);

    $("#treeworld").bind('click', function(e) {
      var x = Math.floor((e.pageX - this.offsetLeft) / tileWidth);
      var y = Math.floor((e.pageY - this.offsetTop) / tileHeight);

      $.post("command", {
        "command[command_type]": "move",
        "command[x]": x,
        "command[y]": y
      });

      commands.push({x: x, y: y});
      console.log("Click: " + x + ", " + y);
    });

    console.log(#{data});
  });
